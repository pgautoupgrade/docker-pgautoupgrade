ARG PGTARGET=17

### Things we need in all build containers
FROM debian:bookworm AS base-build

# The versions of PostgreSQL to use
ENV PG95=9.5.25
ENV PG96=9.6.24
ENV PG10=10.23
ENV PG11=11.22

# renovate: datasource=repology depName=homebrew/postgresql@12 versioning=loose
ENV PG12_VERSION=12.22

# renovate: datasource=repology depName=homebrew/postgresql@13 versioning=loose
ENV PG13_VERSION=13.21

# renovate: datasource=repology depName=homebrew/postgresql@14 versioning=loose
ENV PG14_VERSION=14.17

# renovate: datasource=repology depName=homebrew/postgresql@15 versioning=loose
ENV PG15_VERSION=15.12

# renovate: datasource=repology depName=homebrew/postgresql@16 versioning=loose
ENV PG16_VERSION=16.8

# Where we'll do all our compiling and similar
ENV BUILD_ROOT=/buildroot

# Make the directory for building, and set it as the default for the following Docker commands
RUN mkdir ${BUILD_ROOT}
WORKDIR ${BUILD_ROOT}

# Install things needed for development
RUN apt update && \
  apt install -y build-essential libicu-dev liblz4-dev locales tzdata zlib1g-dev libzstd-dev wget pkg-config && \
  apt clean

### PostgreSQL 9.5
FROM base-build AS build-9.5

RUN wget https://ftp.postgresql.org/pub/source/v${PG95}/postgresql-${PG95}.tar.bz2 && \
  tar -xf postgresql-9.5*.tar.bz2

RUN cd postgresql-9.5.* && \
  ./configure --prefix=/usr/local-pg9.5 --with-openssl=no --without-readline --with-system-tzdata=/usr/share/zoneinfo --enable-debug=no CFLAGS="-Os" && \
  make -j $(nproc) && \
  make install-world && \
  rm -rf /usr/local-pg9.5/include

### PostgreSQL 9.6
FROM base-build AS build-9.6

RUN wget https://ftp.postgresql.org/pub/source/v${PG96}/postgresql-${PG96}.tar.bz2 && \
  tar -xf postgresql-9.6*.tar.bz2

RUN cd postgresql-9.6.* && \
  ./configure --prefix=/usr/local-pg9.6 --with-openssl=no --without-readline --with-system-tzdata=/usr/share/zoneinfo --enable-debug=no CFLAGS="-Os" && \
  make -j $(nproc) && \
  make install-world && \
  rm -rf /usr/local-pg9.6/include

### PostgreSQL 10
FROM base-build AS build-10
RUN wget https://ftp.postgresql.org/pub/source/v${PG10}/postgresql-${PG10}.tar.bz2 && \
  tar -xf postgresql-10*.tar.bz2

RUN cd postgresql-10.* && \
  ./configure --prefix=/usr/local-pg10 --with-openssl=no --without-readline --with-icu --with-system-tzdata=/usr/share/zoneinfo --enable-debug=no CFLAGS="-Os" && \
  make -j $(nproc) && \
  make install-world && \
  rm -rf /usr/local-pg10/include

### PostgreSQL 11
FROM base-build AS build-11
RUN wget https://ftp.postgresql.org/pub/source/v${PG11}/postgresql-${PG11}.tar.bz2 && \
  tar -xf postgresql-11*.tar.bz2

RUN cd postgresql-11.* && \
  ./configure --prefix=/usr/local-pg11 --with-openssl=no --without-readline --with-icu --with-system-tzdata=/usr/share/zoneinfo --enable-debug=no CFLAGS="-Os" && \
  make -j $(nproc) && \
  make install-world && \
  rm -rf /usr/local-pg11/include

### PostgreSQL 12
FROM base-build AS build-12
RUN wget https://ftp.postgresql.org/pub/source/v${PG12_VERSION}/postgresql-${PG12_VERSION}.tar.bz2 && \
  tar -xf postgresql-12*.tar.bz2

RUN cd postgresql-12.* && \
  ./configure --prefix=/usr/local-pg12 --with-openssl=no --without-readline --with-icu --with-system-tzdata=/usr/share/zoneinfo --enable-debug=no CFLAGS="-Os" && \
  make -j $(nproc) && \
  make install-world && \
  rm -rf /usr/local-pg12/include

### PostgreSQL 13
FROM base-build AS build-13

RUN wget https://ftp.postgresql.org/pub/source/v${PG13_VERSION}/postgresql-${PG13_VERSION}.tar.bz2 && \
  tar -xf postgresql-13*.tar.bz2

RUN cd postgresql-13.* && \
  ./configure --prefix=/usr/local-pg13 --with-openssl=no --without-readline --with-icu --with-system-tzdata=/usr/share/zoneinfo --enable-debug=no CFLAGS="-Os" && \
  make -j $(nproc) && \
  make install-world && \
  rm -rf /usr/local-pg13/include

### PostgreSQL 14
FROM base-build AS build-14

RUN wget https://ftp.postgresql.org/pub/source/v${PG14_VERSION}/postgresql-${PG14_VERSION}.tar.bz2 && \
  tar -xf postgresql-14*.tar.bz2

RUN cd postgresql-14.* && \
  ./configure --prefix=/usr/local-pg14 --with-openssl=no --without-readline --with-icu --with-lz4 --with-system-tzdata=/usr/share/zoneinfo --enable-debug=no CFLAGS="-Os" && \
  make -j $(nproc) && \
  make install-world && \
  rm -rf /usr/local-pg14/include

### PostgreSQL 15
FROM base-build AS build-15

RUN wget https://ftp.postgresql.org/pub/source/v${PG15_VERSION}/postgresql-${PG15_VERSION}.tar.bz2 && \
  tar -xf postgresql-15*.tar.bz2

RUN cd postgresql-15.* && \
  ./configure --prefix=/usr/local-pg15 --with-openssl=no --without-readline --with-icu --with-lz4 --with-system-tzdata=/usr/share/zoneinfo --enable-debug=no CFLAGS="-Os" && \
  make -j $(nproc) && \
  make install-world && \
  rm -rf /usr/local-pg15/include

### PostgreSQL 16
FROM base-build AS build-16

RUN wget https://ftp.postgresql.org/pub/source/v${PG16_VERSION}/postgresql-${PG16_VERSION}.tar.gz && \
  tar -xf postgresql-16*.tar.gz

RUN cd postgresql-16.* && \
  ./configure --prefix=/usr/local-pg16 --with-openssl=no --without-readline --with-icu --with-lz4 --with-system-tzdata=/usr/share/zoneinfo --enable-debug=no CFLAGS="-Os" && \
  make -j $(nproc) && \
  make install-world && \
  rm -rf /usr/local-pg16/include

# Use the PostgreSQL Bookworm image as our output image base
FROM postgres:${PGTARGET}-bookworm

# Copy default configuration in case the original container does not provide it (Bitnami ...)
RUN mkdir -p /opt/pgautoupgrade && \
  chmod 660 /opt/pgautoupgrade && \
  chown 999:999 /opt/pgautoupgrade
COPY --chown=999 postgresql.conf pg_hba.conf /opt/pgautoupgrade/

# We need to define this here, to make the above PGTARGET available after the FROM
ARG PGTARGET

# Copy across our compiled files
COPY --from=build-9.5 /usr/local-pg9.5 /usr/local-pg9.5
COPY --from=build-9.6 /usr/local-pg9.6 /usr/local-pg9.6
COPY --from=build-10 /usr/local-pg10 /usr/local-pg10
COPY --from=build-11 /usr/local-pg11 /usr/local-pg11
COPY --from=build-12 /usr/local-pg12 /usr/local-pg12
COPY --from=build-13 /usr/local-pg13 /usr/local-pg13
COPY --from=build-14 /usr/local-pg14 /usr/local-pg14
COPY --from=build-15 /usr/local-pg15 /usr/local-pg15
COPY --from=build-16 /usr/local-pg16 /usr/local-pg16

# Remove any left over PG directory stubs.  Doesn't help with image size, just with clarity on what's in the image.
RUN if [ "${PGTARGET}" -eq 12 ]; then rm -rf /usr/local-pg12 /usr/local-pg13 /usr/local-pg14 /usr/local-pg15 /usr/local-pg16; fi
RUN if [ "${PGTARGET}" -eq 13 ]; then rm -rf /usr/local-pg13 /usr/local-pg14 /usr/local-pg15 /usr/local-pg16; fi
RUN if [ "${PGTARGET}" -eq 14 ]; then rm -rf /usr/local-pg14 /usr/local-pg15 /usr/local-pg16; fi
RUN if [ "${PGTARGET}" -eq 15 ]; then rm -rf /usr/local-pg15 /usr/local-pg16; fi
RUN if [ "${PGTARGET}" -eq 16 ]; then rm -rf /usr/local-pg16; fi

# Install locale
RUN apt update && \
  apt install -y icu-devtools locales tzdata && \
  apt clean

# Pass the PG build target through to the running image
ENV PGTARGET=${PGTARGET}

# Copy across all our shell scripts
COPY pgautoupgrade-healthcheck.sh postgres-docker-entrypoint.sh docker-entrypoint.sh /usr/local/bin/

# Set up the script run by the container when it starts
WORKDIR /var/lib/postgresql
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

HEALTHCHECK CMD /usr/local/bin/pgautoupgrade-healthcheck.sh

CMD ["postgres"]
